[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "denoising-diffusion-pytorch"
dynamic = ["version"]
description = "Denoising Diffusion Probabilistic Models - Pytorch"
readme = "README.md"
license = "MIT"
authors = [
    { name = "Phil Wang", email = "lucidrains@gmail.com" },
]
keywords = [
    "artificial intelligence",
    "generative models",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.7",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dependencies = [
    "accelerate",
    "einops",
    "ema-pytorch>=0.4.2",
    "more-itertools",
    "numpy",
    "pillow",
    "pytorch-fid",
    "scipy",
    "torch",
    "torchvision",
    "tqdm",
    "fibsem-tools@git+ssh://git@github.com/neptunes5thmoon/fibsem-tools.git@feat/deep_tree",
    "zarr",
    "mlflow",
    "distinctipy",
    "cellmap-utils-kit@git+ssh://git@github.com/saalfeldlab/cellmap-utils-kit.git"
]
requires-python = ">=3.7"

[project.urls]
Homepage = "https://github.com/lucidrains/denoising-diffusion-pytorch"

[tool.hatch.version]
path = "src/denoising_diffusion_pytorch/version.py"

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.envs.default]
dependencies = ["coverage[toml]>=6.5","pytest"]
type = "conda"
command = "mamba"
conda-forge = true
[tool.hatch.envs.default.static]
dev-mode = true

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = ["- coverage combine", "coverage report"]
cov = ["test-cov", "cov-report"]

[tool.hatch.envs.lint]
type = "conda"
command = "mamba"
conda-forge = true
detached = true
dependencies = ["black>23.1.0", "mypy>=1.0.0", "ruff>=0.0.243", "isort"]

[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:src/denoising_diffusion_pytorch tests}"
style = ["ruff {args:.}", "black --check --diff {args:.}"]
fmt = ["black {args:.}", "ruff --fix {args:.}", "style"]
all = ["style", "typing"]

[tool.black]
target-version = ["py37"]
line-length = 120
skip-string-normalization = true

[tool.ruff]
target-version = "py37"
line-length = 120
select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105",
  "S106",
  "S107",
  # Ignore complexity
  "C901",
  "PLR0911",
  "PLR0912",
  "PLR0913",
  "PLR0915",
]
unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.isort]
known-first-party = ["denoising_diffusion_pytorch"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.coverage.run]
source_pkgs = ["denoising_diffusion_pytorch", "tests"]
branch = true
parallel = true
omit = ["src/denoising_diffusion_pytorch/__about__.py"]

[tool.coverage.paths]
denoising_diffusion_pytorch = ["src/denoising_diffusion_pytorch", "*/denoising_diffusion_pytorch/src/denoising_diffusion_pytorch"]
tests = ["tests", "*/denoising_diffusion_pytorch/tests"]

[tool.coverage.report]
exclude_lines = ["no cov", "if __name__ == .__main__.:", "if TYPE_CHECKING:"]

[tool.hatch.build.targets.sdist]
include = [
    "/denoising_diffusion_pytorch",
]
